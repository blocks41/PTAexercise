#include <iostream>
#include <queue>

using namespace std;

using WeightType = int;   //定义权重类型为int
using Vertex = int;   //定义结点类型为int

//邻接表的每一项
using PtrToAdjNode = class AdjVNode*;
class AdjVNode {
public:
    Vertex AdjV;   //邻接点下标
    PtrToAdjNode Next;  //下一个结点
};
//邻接表
using AdjList = class VNode*;
class VNode {
public:
    PtrToAdjNode FirstEdge;
    int Data;  //可以用来插入单独的点，没有边
};

//以邻接矩阵存储的图类
class Graph {
public:
    int Nv;  //顶点数 
    int Ne;  // 边数   
    AdjList G; // 邻接表
    bool* Visited;  //标志是否访问过
public:
    Graph(int VertexNum);  //带参构造函数
    void InsertEdge(Vertex V1, Vertex V2);    //插入边
    void DFS(Vertex V); //DFS
    void Init_Visited();  //将Visited全部变为false
};


int main() {
    int Num_of_Node, Num_of_Edge;  //顶点数、边数
    Vertex V1, V2;    //点

    cin >> Num_of_Node>> Num_of_Edge;  //输入顶点数、边数
    Graph G{ Num_of_Node };   //定义图

    for (int i = 0; i < Num_of_Edge; i++) {
        cin >> V1 >> V2;   //输入边
        G.InsertEdge(V1, V2);   //插入边
    }

    for (int i = 0; i < Num_of_Node; i++) {
        if (G.Visited[i] != true) {
            cout << "{ ";
            G.DFS(i);
            cout << "}\n";
        }
    }
    G.Init_Visited();  //将标识重置

    return 0;
}

Graph::Graph(int VertexNum) {
    Nv = VertexNum;
    Ne = 0;
    G = new VNode[VertexNum];
    Visited = new bool[VertexNum];

    for (int i = 0; i < VertexNum; i++) {
        G[i].FirstEdge = nullptr;
        Visited[i] = false;
    }
}

void Graph::InsertEdge(Vertex V1, Vertex V2) {
    PtrToAdjNode NewNode;

    //这里可以加判断有没有加过这条边，但是会超时

    //插入边 <V1, V2>
    NewNode = new AdjVNode;  //建立结点
    NewNode->AdjV = V2;
    //  将结点插入头后
    NewNode->Next = G[V1].FirstEdge;
    G[V1].FirstEdge = NewNode;

    //插入边 <V2, V1>
    NewNode = new AdjVNode;  //建立结点
    NewNode->AdjV = V1;
    //  将结点插入头后
    NewNode->Next = G[V2].FirstEdge;
    G[V2].FirstEdge = NewNode;

    Ne++;//边数加1
}

void Graph::DFS(Vertex V) {
    PtrToAdjNode W;

    cout << V << " ";    //输出V
    Visited[V] = true; // 标记V已访问,防止出现死循环 

    for (W = G[V].FirstEdge; W; W = W->Next) {
        if (Visited[W->AdjV] != true) {
            DFS(W->AdjV);
        }
    }
}

void Graph::Init_Visited() {
    for (int i = 0; i < Nv; i++) {
        Visited[i] = false;
    }
}
